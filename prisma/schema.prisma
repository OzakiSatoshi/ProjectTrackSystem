generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  account_id       String    @id @default(uuid()) @db.Uuid
  account_name     String    @db.Text
  account_number   String?   @db.Text
  telephone1       String?   @db.Text
  telephone2       String?   @db.Text
  fax              String?   @db.Text
  website_url      String?   @db.Text
  email_address1   String?   @db.Text
  email_address2   String?   @db.Text
  
  // Address information
  address1_line1   String?   @db.Text
  address1_line2   String?   @db.Text
  address1_city    String?   @db.Text
  address1_state   String?   @db.Text
  address1_postal  String?   @db.Text
  address1_country String?   @db.Text
  
  // Business information
  industry_code    String?   @db.Text
  revenue          String?   @db.Text
  employees        String?   @db.Text
  description      String?   @db.Text
  
  // Status and classification
  status_code      Int?      @default(1)
  customer_type    String?   @db.Text
  account_rating   String?   @db.Text
  
  contacts         Contact[]
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  @@map("accounts")
}

model Contact {
  contact_id     String    @id @default(uuid()) @db.Uuid
  contact_name   String    @db.Text
  account_id     String    @db.Uuid
  
  // Name fields
  firstname      String?   @db.Text
  lastname       String?   @db.Text
  fullname       String?   @db.Text
  
  // Contact details
  telephone1     String?   @db.Text
  telephone2     String?   @db.Text
  telephone3     String?   @db.Text
  mobilephone    String?   @db.Text
  email_address1 String?   @db.Text
  email_address2 String?   @db.Text
  email_address3 String?   @db.Text
  fax            String?   @db.Text
  
  // Position information
  jobtitle       String?   @db.Text
  department     String?   @db.Text
  company        String?   @db.Text
  manager_name   String?   @db.Text
  manager_phone  String?   @db.Text
  
  // Address information
  address1_line1 String?   @db.Text
  address1_line2 String?   @db.Text
  address1_city  String?   @db.Text
  address1_state String?   @db.Text
  address1_postal String?  @db.Text
  address1_country String? @db.Text
  address1_telephone1 String? @db.Text
  
  // Additional details
  salutation     String?   @db.Text
  suffix         String?   @db.Text
  nickname       String?   @db.Text
  birthdate      String?   @db.Text
  anniversary    String?   @db.Text
  description    String?   @db.Text
  
  // Status and preferences
  statuscode     Int?      @default(1)
  gendercode     Int?
  preferred_contact_method Int?
  
  account        Account   @relation(fields: [account_id], references: [account_id])
  anken          Anken[]
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt

  @@map("contacts")
}

model Anken {
  anken_id     String    @id @default(uuid()) @db.Uuid
  anken_name   String    @db.Text
  contact_id   String?   @db.Uuid
  detail       String?   @db.Text
  notes        String?   @db.Text
  start_date   String?   @db.Text
  end_date     String?   @db.Text

  price        String?   @db.Text
  limit_date   String?   @db.Text
  contract     String?   @db.Text

  foreigner    String?   @db.Text
  telework     String?   @db.Text
  telework_yn  Int?
  required_skills String? @db.Text
  nice_skills  String?   @db.Text
  process      String?   @db.Text
  platform     String?   @db.Text
  framework    String?   @db.Text
  program      String?   @db.Text
  db           String?   @db.Text
  location     String?   @db.Text
  ken          String?   @db.Text
  time_from    String?   @db.Text
  time_to      String?   @db.Text
  duplicate_check String? @db.Text
  persons      String?   @db.Text
  created_at   String?   @db.Text
  updated_at   String?   @db.Text
  contact      Contact?  @relation(fields: [contact_id], references: [contact_id])

  @@map("anken")
}